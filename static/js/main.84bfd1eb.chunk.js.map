{"version":3,"sources":["Containers/Formatter/Formatter.module.scss","Components/Input/Input.module.scss","Components/Display/Display.module.scss","Components/Button/Button.module.scss","Helpers/numberValidator.ts","Components/Button/Button.tsx","Components/Input/Input.tsx","Components/Display/Display.tsx","Containers/Formatter/Formatter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","numberValidator","phoneNumber","numberToCheck","split","join","button","props","className","classes","ButtonWrapper","onClick","clicked","disabled","children","input","field","type","name","onChange","inputChange","placeholder","htmlFor","label","display","DisplayWrapper","displayType","Formatter","state","isError","isSuccess","errorMessage","successMessage","submittedPhoneNumber","formattedNumber","inputHandler","e","target","setState","value","convertNumberFormat","formatNumber","parsePhoneNumberFromString","formatNational","headerSection","HeaderWrapper","this","pageTitle","inputSection","InputWrapper","Input","Button","displayError","Display","displaySuccess","displaySection","ErrorDisplay","SuccessDisplay","FormatterWrapper","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84bfd1eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormatterWrapper\":\"Formatter_FormatterWrapper__4d9x-\",\"HeaderWrapper\":\"Formatter_HeaderWrapper__32fIk\",\"InputWrapper\":\"Formatter_InputWrapper__1YB1L\",\"DisplayWrapper\":\"Formatter_DisplayWrapper__eHAJB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"Input_field__2ispG\",\"label\":\"Input_label__2uf_I\",\"input\":\"Input_input__267Jt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Display_error__1Ugao\",\"success\":\"Display_success__3sqon\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonWrapper\":\"Button_ButtonWrapper__1isgn\"};","const numberValidator = (phoneNumber: string) => {\n  const numberToCheck = phoneNumber.split('');\n  const output = [numberToCheck[0], numberToCheck[1], numberToCheck[2]].join('');\n  if (output !== '+44') {\n    return false\n  } else {\n    return true;\n  }\n}\n\nexport default numberValidator;\n","import * as React from 'react';\nimport classes from './Button.module.scss';\n\ninterface propTypes {\n  clicked?: any;\n  disabled?: boolean;\n  children?: string;\n}\n\nconst button = (props: propTypes) => {\n  return (\n    <button\n      className={classes.ButtonWrapper}\n      onClick={props.clicked}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default button;\n","import React from 'react';\nimport classes from './Input.module.scss';\n\ninterface propTypes {\n  inputChange?: any;\n  placeholder?: string;\n}\n\nconst input = (props: propTypes) => {\n  return (\n    <div className={classes.field}>\n      <input\n        type=\"text\"\n        name=\"phonenumber\"\n        className={classes.input}\n        onChange={props.inputChange}\n        placeholder=\" \"\n      />\n      <label htmlFor=\"phonenumber\" className={classes.label}>\n        {props.placeholder}\n      </label>\n    </div>\n  );\n};\n\nexport default input;\n","import * as React from 'react';\nimport classes from './Display.module.scss';\n\ninterface propTypes {\n  children?: string;\n  displayType: string;\n}\n\nconst display = (props: propTypes) => {\n  return (\n    <div\n      className={[classes.DisplayWrapper, classes[props.displayType]].join(' ')}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default display;\n","import * as React from 'react';\nimport { Component } from 'react';\nimport classes from './Formatter.module.scss';\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nimport numberValidator from '../../Helpers/numberValidator';\n\nimport Button from '../../Components/Button/Button';\nimport Input from '../../Components/Input/Input';\nimport Display from '../../Components/Display/Display';\n\ninterface propTypes {\n  pageTitle?: string;\n}\n\nclass Formatter extends Component<propTypes> {\n  state = {\n    isError: false,\n    isSuccess: false,\n    errorMessage: '',\n    successMessage: '',\n    submittedPhoneNumber: '',\n    formattedNumber: '',\n  };\n\n  inputHandler = (e: React.FormEvent<EventTarget>): void => {\n    let target = e.target as HTMLInputElement;\n    this.setState({\n      isError: false,\n      isSuccess: false,\n      errorMessage: '',\n      successMessage: '',\n      submittedPhoneNumber: target.value,\n    });\n  };\n\n  convertNumberFormat = () => {\n    numberValidator(this.state.submittedPhoneNumber)\n      ? this.formatNumber(this.state.submittedPhoneNumber)\n      : this.setState({\n          isError: true,\n          errorMessage: `${this.state.submittedPhoneNumber} is not a valid UK Phone number ðŸ˜¢`,\n        });\n  };\n\n  formatNumber = (submittedPhoneNumber: string) => {\n    if (submittedPhoneNumber !== null) {\n      const phoneNumber = parsePhoneNumberFromString(submittedPhoneNumber);\n      this.setState({\n        isSuccess: true,\n        successMessage: `Here's your formatted number: ${phoneNumber?.formatNational()} ðŸ¥³`,\n      });\n    } else {\n      this.setState({ isError: true, errorMessage: 'Error formatting number' });\n    }\n  };\n\n  render() {\n    const headerSection = (\n      <div className={classes.HeaderWrapper}>\n        <h1>{this.props.pageTitle}</h1>\n      </div>\n    );\n\n    const inputSection = (\n      <div className={classes.InputWrapper}>\n        <Input\n          placeholder={'Phone Number'}\n          inputChange={(e: React.FormEvent<EventTarget>): void =>\n            this.inputHandler(e)\n          }\n        ></Input>\n        <Button\n          clicked={this.convertNumberFormat}\n          disabled={this.state.submittedPhoneNumber === ''}\n        >\n          Check Number\n        </Button>\n      </div>\n    );\n\n    const displayError = this.state.isError ? (\n      <Display displayType={'error'}>{this.state.errorMessage}</Display>\n    ) : null;\n\n    const displaySuccess = this.state.isSuccess ? (\n      <Display displayType={'success'}>{this.state.successMessage}</Display>\n    ) : null;\n\n    const displaySection = (\n      <div className={classes.DisplayWrapper}>\n        {this.state.isError ? (\n          <div className={classes.ErrorDisplay}>{displayError}</div>\n        ) : (\n          <div className={classes.SuccessDisplay}>{displaySuccess}</div>\n        )}\n      </div>\n    );\n\n    return (\n      <main className={classes.FormatterWrapper}>\n        {headerSection}\n        {inputSection}\n        {displaySection}\n      </main>\n    );\n  }\n}\n\nexport default Formatter;\n","import React from 'react';\nimport './App.scss';\n\nimport Formatter from './Containers/Formatter/Formatter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Formatter pageTitle={'UK Phone Number Formatter'}></Formatter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}